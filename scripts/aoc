#!/bin/bash

if [[ -f .env ]]; then
    source .env
fi

year=$YEAR
day=$DAY
ALL_DAYS=false
INIT=false
RUN=false
TEST=false
INPUT_FILE=""

show_help() {
    echo "Usage: aoc [-h] "
    echo "Options:"
    echo "  -a, --all-days       Run or test all days"
    echo "  -t, --test           Run tests"
    echo "  -g, --init           Initialize a new day"
    echo "  -i, --input FILE     Specify input file"
    echo "  -r, --run            Run the solution"
    echo "  -y, --year YEAR      Specify the year (four digits)"
    echo "  -d, --day DAY        Specify the day (two digits)"
    echo "  -h, --help           Show this help message"
}

get_all_flags() {
    while getopts "atgiry:d:h-:" opt; do
        case $opt in
            a) ALL_DAYS=true;;
            t) TEST=true;;
            g) INIT=true;;
            i) INPUT_FILE="${!OPTIND}"; OPTIND=$((OPTIND + 1));;
            r) RUN=true;;
            y) year="$OPTARG";;
            d) day="$OPTARG";;
            h) show_help; exit 0;;
            -)
                case "${OPTARG}" in
                    all-days) ALL_DAYS=true;;
                    init) INIT=true;;
                    run) RUN=true;;
                    test) TEST=true;;
                    input) INPUT_FILE="${!OPTIND}"; OPTIND=$((OPTIND + 1));;
                    year)
                        year="${!OPTIND}"; OPTIND=$((OPTIND + 1));;
                    day)
                        day="${!OPTIND}"; OPTIND=$((OPTIND + 1));;
                    help) show_help; exit 0;;
                    *) echo "Unknown flag: -${OPTARG}";;
                esac;;
            *) show_help; exit 1;;
        esac
    done
}

validate_date() {
    RESULT=0

    if [[ ! -z $year && ! $year =~ ^[0-9]{4}$ ]]; then
        echo "Invalid year: $year"
        echo "Must be four digits long"
        RESULT=1
    fi

    if [[ ! -z $day ]] && [[ ! $day =~ ^[0-9]{2}$ ]]; then
        echo "Invalid day: $day"
        echo "Must be two digits long"
        RESULT=1
    fi

    if [[ RESULT == 1 ]]; then
        exit 1
    fi

    return $RESULT
}

use_today_if_no_date() {
    if [[ -z $YEAR ]]; then
        export YEAR=${YEAR:-$(date +%Y)}
    fi

    if [[ -z $DAY ]]; then
        export DAY=${DAY:-$(date +%d)}
    fi
}

get_all_flags "$@"

if ([ "$RUN" = true ] && [ "$TEST" = true ]) || ([ "$RUN" = true ] && [ "$INIT" = true ]) || ([ "$TEST" = true ] && [ "$INIT" = true ]); then
    echo "Error: Options --run|-r, --test|-t, and --init|-g cannot be used together."
    show_help
    exit 1
fi

if [ "$TEST" = true ]; then
    if [ "$ALL_DAYS" = false ]; then
        validate_date "$year" "$day"
        if [[ $? -ne 0 ]]; then
            exit 1
        fi
        use_today_if_no_date
        stack test --test-arguments="--match=/AoC/${YEAR}${DAY}/" --progress-bar=none 
    else
        stack run -- --all-days
    fi
    exit 0
fi

if [ "$RUN" = true ]; then
    if [ "$ALL_DAYS" = false ]; then
        validate_date "$year" "$day"
        if [[ $? -ne 0 ]]; then
            exit 1
        fi
        use_today_if_no_date
        if [ -z "$INPUT_FILE" ]; then
            stack run -- -d ${YEAR}${DAY} --timings
        else
            stack run -- -d ${YEAR}${DAY} -i "$INPUT_FILE" --timings
        fi
    else
        stack run -- --all-days --timings
    fi
    exit 0
fi

if [ "$INIT" = true ]; then
    validate_date "$year" "$day"
    if [[ $? -ne 0 ]]; then
        exit 1
    fi
    export YEAR=$year
    export DAY=$day
    use_today_if_no_date
    ./scripts/init_day.sh
fi